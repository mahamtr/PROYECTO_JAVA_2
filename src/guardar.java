
import java.awt.geom.RoundRectangle2D;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Maai Ham
 */
public class guardar extends javax.swing.JFrame {
    private int p,i,s,seleccion;
    private boolean a,b,c,d;

    public guardar() {
        initComponents();
        this.setShape(new RoundRectangle2D.Double(10, 10, 400, 600, 30, 30));
         this.setSize(500,800);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        si = new javax.swing.JToggleButton();
        no = new javax.swing.JToggleButton();
        intentog = new javax.swing.JLabel();
        puntuajeg = new javax.swing.JLabel();
        lla = new javax.swing.JLabel();
        llab = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jLabel1.setBackground(new java.awt.Color(220, 221, 225));
        jLabel1.setFont(new java.awt.Font("Siemens AD Sans", 0, 34)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(47, 54, 64));
        jLabel1.setText("Desea guardar puntuaje?");

        si.setBackground(new java.awt.Color(76, 209, 55));
        si.setFont(new java.awt.Font("Siemens AD Sans", 0, 24)); // NOI18N
        si.setText("si");
        si.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siActionPerformed(evt);
            }
        });

        no.setBackground(new java.awt.Color(232, 65, 24));
        no.setFont(new java.awt.Font("Siemens AD Sans", 0, 24)); // NOI18N
        no.setText("no");
        no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noActionPerformed(evt);
            }
        });

        intentog.setFont(new java.awt.Font("Siemens AD Sans", 0, 24)); // NOI18N
        intentog.setForeground(new java.awt.Color(64, 115, 158));
        intentog.setText("0000000");

        puntuajeg.setFont(new java.awt.Font("Siemens AD Sans", 0, 24)); // NOI18N
        puntuajeg.setForeground(new java.awt.Color(64, 115, 158));
        puntuajeg.setText("0000000");

        lla.setFont(new java.awt.Font("Siemens AD Sans", 0, 24)); // NOI18N
        lla.setForeground(new java.awt.Color(64, 115, 158));
        lla.setText("Intentos");

        llab.setFont(new java.awt.Font("Siemens AD Sans", 0, 24)); // NOI18N
        llab.setForeground(new java.awt.Color(64, 115, 158));
        llab.setText("Puntuaje");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lla, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(llab, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(puntuajeg)
                                    .addComponent(intentog)))
                            .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(si, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intentog, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lla, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(puntuajeg, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(llab, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(si)
                .addGap(18, 18, 18)
                .addComponent(no)
                .addContainerGap(250, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noActionPerformed
        try {
            dispose();
            mainm menu = new mainm();
            menu.setVisible(true);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_noActionPerformed

    private void siActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siActionPerformed
        try {
            switch (this.getSeleccion()) {
                case 2:
                    this.guardar2();
                    dispose();
                    break;
                case 3:
                    this.guardar3();
                    dispose();
                    break;
                case 4:
                    this.guardar4();
                    dispose();
                    break;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_siActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(guardar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(guardar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(guardar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(guardar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new guardar().setVisible(true);
            }
        });
    }

    public int getS() {
        return s;
    }

    public void setS(int s) {
        this.s = s;
    }

    
    public boolean isA() {
        return a;
    }

    public void setA(boolean a) {
        this.a = a;
    }

    public boolean isB() {
        return b;
    }

    public void setB(boolean b) {
        this.b = b;
    }

    public boolean isC() {
        return c;
    }

    public void setC(boolean c) {
        this.c = c;
    }

    public boolean isD() {
        return d;
    }

    public void setD(boolean d) {
        this.d = d;
    }

    
    public int getSeleccion() {
        return seleccion;
    }

    public void setSeleccion(int seleccion) {
        this.seleccion = seleccion;
    }

    public void guardar4(){
              try (
                Writer writer = new BufferedWriter(new OutputStreamWriter(
              new FileOutputStream("C:\\Temp\\x4.txt"), "utf-8"))) {
   writer.write(this.intentog.getText());
   writer.append("\n");
   writer.write(this.puntuajeg.getText());
    writer.append("\n");
   writer.write(String.valueOf(isA()));
   writer.append("\n");
   writer.write(String.valueOf(isB()));
   writer.append("\n");
   writer.write(String.valueOf(isC()));
   writer.append("\n");
   writer.write(String.valueOf(isD()));
   writer.append("\n");
   writer.write(String.valueOf(getS()));
  dispose();
   mainm menu = new mainm();
        menu.setVisible(true);
}
        catch (FileNotFoundException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void guardar3(){
         try (
                Writer writer = new BufferedWriter(new OutputStreamWriter(
              new FileOutputStream("C:\\Temp\\x3.txt"), "utf-8"))) {
   writer.write(this.intentog.getText());
   writer.append("\n");
   writer.write(this.puntuajeg.getText());
    writer.append("\n");
   writer.write(String.valueOf(isA()));
   writer.append("\n");
   writer.write(String.valueOf(isB()));
   writer.append("\n");
   writer.write(String.valueOf(isC()));
   writer.append("\n");
   writer.write(String.valueOf(getS()));
  dispose();
   mainm menu = new mainm();
        menu.setVisible(true);
}
        catch (FileNotFoundException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    public void guardar2(){
          try (
                Writer writer = new BufferedWriter(new OutputStreamWriter(
              new FileOutputStream("C:\\Temp\\x2.txt"), "utf-8"))) {
   writer.write(this.intentog.getText());
   writer.append("\n");
   writer.write(this.puntuajeg.getText());
    writer.append("\n");
   writer.write(String.valueOf(isA()));
   writer.append("\n");
   writer.write(String.valueOf(isB()));
   writer.append("\n");
   writer.write(String.valueOf(getS()));
  dispose();
   mainm menu = new mainm();
        menu.setVisible(true);
}
        catch (FileNotFoundException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(guardar.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel intentog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lla;
    private javax.swing.JLabel llab;
    private javax.swing.JToggleButton no;
    public javax.swing.JLabel puntuajeg;
    private javax.swing.JToggleButton si;
    // End of variables declaration//GEN-END:variables
}
